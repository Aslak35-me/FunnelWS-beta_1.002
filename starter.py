import sys
import os
import platform
import subprocess
import random
import time
import colorama
import selenium
import threading
from colorama import init
from colorama import Fore, Style
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager


# colorama baÅŸlat
init(autoreset=True)

# config klasÃ¶rÃ¼nÃ¼ sys.path'e ekle
sys.path.append(os.path.join(os.path.dirname(__file__), 'config'))

import config.setting as setting
import useragent
from useragent import get_random_useragent

def clear_console():
        current_os = platform.system()
        os.system('cls' if current_os == "Windows" else 'clear')

def banner():
    print(r"""
+----------------------------------------------------+
|                                                    |
|                                                    |
|   _____                       ___        ______    |
|  |  ___|   _ ____  ____   ___| \ \      / / ___|   |
|  | |_ | | | | __ \| __ \ / _ \ |\ \ /\ / /\___ \   |
|  |  _|| |_| | | | | | | |  __/ | \ V  V /  ___) |  |
|  |_|   \____|_| |_|_| |_|\___|_|  \_/\_/  |____/   |
|                                                    |
|                                                    |
+----------------------------------------------------+
    """)
    print("[*] FunnelWS Web Vulnerability Scanner")
    version()
    print("=" * 55)
    print("[*] Starter baÅŸlatÄ±ldÄ±.")
    print("=" * 55)

def version():
    print("[*] FunnelWS Version BETA_1.002")

def check_settings():
    checks = [
        ("FULL_SCAN", setting.FULL_SCAN),
        ("FAST_SCAN", setting.FAST_SCAN),
        ("SQLMAP", setting.SQLMAP),
        ("WPSCAN", setting.WPSCAN),
        ("NIKTO", setting.NIKTO),
        ("ZAPROXY", setting.ZAPROXY),
        ("METASPLOIT", setting.METASPLOIT)
    ]

    for name, value in checks:
        status = value.lower()
        if status == "on":
            print(f"[*] {name} aktif.")
        elif status == "off":
            print(f"[*] {name} pasif.")
        else:
            print(f"{Fore.YELLOW}[!] {name} bilinmeyen durumda: {value}{Style.RESET_ALL}")

    print("[*] DiÄŸer ayarlar setting.py'den alÄ±ndÄ±.")

def check_conflicts():
    # Ã‡akÄ±ÅŸan parametreler kontrolÃ¼
    if setting.FAST_SCAN.lower() == "on" and setting.FULL_SCAN.lower() == "on":
        print_error_and_exit("FAST ve FULL parametreleri aynÄ± anda kullanÄ±lamaz.")

    if setting.FULL_SCAN.lower() == "on":
        for scanner in [setting.SQLMAP, setting.WPSCAN, setting.NIKTO, setting.ZAPROXY, setting.METASPLOIT]:
            if scanner.lower() == "on":
                print_error_and_exit("FULL ile diÄŸer tarama modlarÄ± (SQLMAP, WPSCAN, NIKTO, vb.) aynÄ± anda kullanÄ±lamaz.")

def print_error_and_exit(message):
    print(f"{Fore.RED}HATA: {message}{Style.RESET_ALL}")
    input(f"{Fore.RED}HATA nedeniyle iÅŸlem sonlandÄ±rÄ±ldÄ±. ProgramÄ± kapatÄ±p tekrar aÃ§Ä±nÄ±z.{Style.RESET_ALL}")
    sys.exit(1)

# TarayÄ±cÄ± baÅŸlatma
def start_browser():
    options = webdriver.ChromeOptions()
    
    # User-Agent baÅŸlÄ±ÄŸÄ±nÄ± al
    user_agent = useragent.get_random_useragent()
    options.add_argument(f"user-agent={user_agent}")  # Rastgele seÃ§ilen User-Agent'Ä± ekle
    
    options.add_argument("--headless")  # TarayÄ±cÄ±yÄ± gÃ¶rÃ¼nmeden Ã§alÄ±ÅŸtÄ±rmak iÃ§in
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    return driver

# Dork aramasÄ± iÃ§in motorlardan sonuÃ§ alma
def dork_search(driver, query, engines=['google', 'bing'], num_results=10):
    print(f"[+] {query} iÃ§in dork aramasÄ± baÅŸlatÄ±lÄ±yor...")
    results = []

    for engine in engines:
        if engine == 'google':
            # Google Dork Tarama
            search_url = f"https://www.google.com/search?q={query}"
            driver.get(search_url)
            time.sleep(3)
            results.extend([a.get_attribute('href') for a in driver.find_elements(By.CSS_SELECTOR, 'a') if a.get_attribute('href')])
        elif engine == 'bing':
            # Bing Dork Tarama
            search_url = f"https://www.bing.com/search?q={query}"
            driver.get(search_url)
            time.sleep(3)
            results.extend([a.get_attribute('href') for a in driver.find_elements(By.CSS_SELECTOR, 'a') if a.get_attribute('href')])

    return results[:num_results]

# Captcha Ã§Ã¶zme iÅŸlemi (manuel)
def solve_captcha(driver):
    print(f"{Fore.YELLOW}[!] Captcha tespit edildi, lÃ¼tfen manuel olarak Ã§Ã¶zÃ¼n.{Style.RESET_ALL}")
    input(f"{Fore.YELLOW}Captcha'yÄ± Ã§Ã¶zÃ¼p Enter'a basÄ±n: {Style.RESET_ALL}")

def save_results_to_file(results, filename="scan_results/dork_result.txt"):
    os.makedirs(os.path.dirname(filename), exist_ok=True)  # KlasÃ¶rleri oluÅŸtur
    with open(filename, 'a', encoding="utf-8") as f:  # 'a' parametresiyle dosyaya ekleme yapÄ±lÄ±r
        for result in results:
            f.write(f"{result}\n")
    print(f"{Fore.GREEN}[+] SonuÃ§lar {filename} dosyasÄ±na kaydedildi.{Style.RESET_ALL}")

def time_tracker(task_name, duration_in_seconds):
    # ZamanlayÄ±cÄ± baÅŸlatÄ±lÄ±r
    start_time = time.time()
    end_time = start_time + duration_in_seconds

    while time.time() < end_time:
        remaining_time = int(end_time - time.time())
        minutes, seconds = divmod(remaining_time, 60)
        print(f"[ / ] {task_name}: Kalan sÃ¼re: {minutes:02}:{seconds:02}", end="\r")
        time.sleep(1)

    # ZamanlayÄ±cÄ± bittiÄŸinde mesaj
    print(f"[ğŸ†—] {task_name}: SÃ¼resi bitti!")

# Ã‡alÄ±ÅŸtÄ±rÄ±cÄ± Fonksiyonlar
def run_dork_scan():
    print(f"{Fore.CYAN}[+] Dork taramasÄ± baÅŸlatÄ±lÄ±yor...{Style.RESET_ALL}")
    
    # Dork Sorgusu SeÃ§imi
    if setting.DORK:
        dork_query = setting.DORK
        targets = dork_search(driver, dork_query, engines=['google', 'bing'], num_results=20)
    elif setting.DORK_INPUT:
        with open(setting.DORK_INPUT, "r", encoding="utf-8") as f:
            dork_queries = f.read().splitlines()
        
        targets = []
        for query in dork_queries:
            found = dork_search(driver, query, engines=['google', 'bing'], num_results=10)
            targets.extend(found)
    else:
        print(f"{Fore.RED}[!] Dork veya dork-input verilmemiÅŸ.{Style.RESET_ALL}")
        return

    print(f"{Fore.GREEN}[+] Bulunan hedefler ({len(targets)}):{Style.RESET_ALL}")
    for url in targets:
        print(f"   -> {url}")
        driver.get(url)
        time.sleep(3)

        # EÄŸer bir captcha varsa, Ã§Ã¶zÃ¼lmesini iste
        if "captcha" in driver.page_source.lower():
            solve_captcha(driver)

    # SonuÃ§larÄ± dosyaya kaydet
    save_results_to_file(targets)

    driver.quit()
    # TarayÄ±cÄ± baÅŸlatma
    driver = start_browser()

def run_panelfinder():### daha yapÄ±lmadÄ±
    print(" panel finder Ã§alÄ±ÅŸtÄ±rÄ±ldÄ±")

def run_sqlmap():
    print(f"{Fore.CYAN}[+] SQLMAP taramasÄ± baÅŸlatÄ±lÄ±yor...{Style.RESET_ALL}")

    level = int(setting.LEVEL)

    if level <= 2:
        risk = 1
    elif level <= 4:
        risk = 2
    else:
        risk = 3

    if level == 1:
        depth = 1
    elif level == 2:
        depth = 2
    elif level == 3:
        depth = 3
    elif level == 4:
        depth = 4
    else:
        depth = 5

    command = [
        "sqlmap",
        "-u", setting.TARGET,
        "--level", str(level),
        "--risk", str(risk),
        "--depth", str(depth),
        "--batch"
    ]

    if setting.RANDOM_AGENT.lower() == "on":
        user_agent = get_random_useragent()
        command += ["--user-agent", user_agent]

    subprocess.run(command)

def run_wpscan():
    print(f"{Fore.CYAN}[+] WPSCAN taramasÄ± baÅŸlatÄ±lÄ±yor...{Style.RESET_ALL}")

    command = [
        "wpscan",
        "--url", setting.TARGET,
        "--disable-tls-checks"
    ]

    if setting.RANDOM_AGENT.lower() == "on":
        user_agent = get_random_useragent()
        command += ["--user-agent", user_agent]

    subprocess.run(command)

def run_nikto():
    print(f"{Fore.CYAN}[+] NIKTO taramasÄ± baÅŸlatÄ±lÄ±yor...{Style.RESET_ALL}")

    command = [
        "nikto",
        "-h", setting.TARGET
    ]

    if setting.RANDOM_AGENT.lower() == "on":
        user_agent = get_random_useragent()
        command += ["-useragent", user_agent]

    subprocess.run(command)

def run_zaproxy():
    print(f"{Fore.CYAN}[+] OWASP ZAP taramasÄ± baÅŸlatÄ±lÄ±yor...{Style.RESET_ALL}")

    command = [
        "zap-cli",
        "quick-scan",
        "--self-contained",
        setting.TARGET
    ]

    if setting.RANDOM_AGENT.lower() == "on":
        user_agent = get_random_useragent()
        command += ["--user-agent", user_agent]

    subprocess.run(command)

def run_metasploit():
    print(f"{Fore.CYAN}[+] METASPLOIT taramasÄ± baÅŸlatÄ±lÄ±yor...{Style.RESET_ALL}")
    command = [
        "msfconsole",
        "-q", 
        "-x", f"use auxiliary/scanner/http/http_version; set RHOSTS {setting.TARGET}; run; exit"
    ]

    if setting.RANDOM_AGENT.lower() == "on":
        user_agent = get_random_useragent()
        command += ["--user-agent", user_agent]

    subprocess.run(command)

def run_full_scan():
    print(f"{Fore.CYAN}[+] FULL tarama baÅŸlatÄ±lÄ±yor...{Style.RESET_ALL}")
    threads = []

    # Her tarama fonksiyonu iÃ§in ayrÄ± bir iÅŸ parÃ§acÄ±ÄŸÄ± baÅŸlat
    if setting.SQLMAP.lower() == "on":
        thread_sqlmap = threading.Thread(target=run_sqlmap)
        threads.append(thread_sqlmap)

    if setting.WPSCAN.lower() == "on":
        thread_wpscan = threading.Thread(target=run_wpscan)
        threads.append(thread_wpscan)

    if setting.NIKTO.lower() == "on":
        thread_nikto = threading.Thread(target=run_nikto)
        threads.append(thread_nikto)

    if setting.ZAPROXY.lower() == "on":
        thread_zaproxy = threading.Thread(target=run_zaproxy)
        threads.append(thread_zaproxy)

    if setting.METASPLOIT.lower() == "on":
        thread_metasploit = threading.Thread(target=run_metasploit)
        threads.append(thread_metasploit)

    # TÃ¼m iÅŸ parÃ§acÄ±klarÄ±nÄ± baÅŸlat
    for thread in threads:
        thread.start()

    # TÃ¼m iÅŸ parÃ§acÄ±klarÄ± tamamlanana kadar bekle
    for thread in threads:
        thread.join()
    
def iÅŸlem_sÄ±ralama():
    if setting.DORK.lower() == "on"
        # ZamanlayÄ±cÄ± ekle
        time_tracker("Dork Tarama", 120)  # 120 saniyelik Ã¶rnek sÃ¼re
        run_dork_scan()
    else:
        if setting.FULL_SCAN.lower() == "on":
            # ZamanlayÄ±cÄ± ekle
            time_tracker("FULL Tarama", 600)  # 600 saniyelik Ã¶rnek sÃ¼re
            run_full_scan()
        else:
            if setting.SQLMAP.lower() == "on":
                # ZamanlayÄ±cÄ± ekle
                time_tracker("SQLMAP Tarama", 60)  # 60 saniyelik Ã¶rnek sÃ¼re
                run_sqlmap()
            if setting.WPSCAN.lower() == "on":
                # ZamanlayÄ±cÄ± ekle
                time_tracker("WPSCAN Tarama", 60)  # 60 saniyelik Ã¶rnek sÃ¼re
                run_wpscan()
            if setting.NIKTO.lower() == "on":
                # ZamanlayÄ±cÄ± ekle
                time_tracker("NIKTO Tarama", 60)  # 60 saniyelik Ã¶rnek sÃ¼re
                run_nikto()
            if setting.ZAPROXY.lower() == "on":
                # ZamanlayÄ±cÄ± ekle
                time_tracker("ZAPROXY Tarama", 60)  # 60 saniyelik Ã¶rnek sÃ¼re
                run_zaproxy()
            if setting.METASPLOIT.lower() == "on":
                # ZamanlayÄ±cÄ± ekle
                time_tracker("METASPLOIT Tarama", 60)  # 60 saniyelik Ã¶rnek sÃ¼re
                run_metasploit()

if __name__ == "__main__":

    iÅŸlem_sÄ±ralama()
